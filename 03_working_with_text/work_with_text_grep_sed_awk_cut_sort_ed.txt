grep -C 1 (one line of context surrounding the match)
grep -A n (n lines after the match)
grep -B n (n lines before the match)
grep -i   (case insensitive search)
grep -v   (invert the search)
grep -R   (search recursively within a folder)

grep -a   (to treat binary files as text, but can get garbage on screen). Better to pass it through the strings command first before grepping


The name "regular expression" comes from the mathematical roots of computer science, where formal language theory describes regular languages, which are languages that can be described by a regular grammar (according to a set of rules)

sed (whole line manipulation with i, a, d combined with pattern) and within line manipulation with 's'
---

to append, use the 'a' command

in GNU sed "a newtext" file.txt will append 'newtext' to a new line

sed 'a\
newtext
' textfile


insert before each line, use the 'i' command

insert before a specific line, add the address eg. to insert before the 3rd line in gnused, sed "3i newtext" file.txt
insert after a specific line, add the address eg. to insert after the 3rd line in gnused, sed "3a newtext" file.txt

delete all lines, sed 'd' file.txt
delete 1st line, sed '1d' file.txt

sed "/regex/d" file.txt

to append a line after a line containing the desired regex
eg. sed '/line/a\
\haha
' textfile

and another eg:
sed '/^[A-Z]/a\
\CAPS
' textfile

sed 's/\([aeiou]\)/[\1]/g' textfile


awk
----

awk '{print $1}' textfile
awk '{print $2 $1}' textfile  (reorder fields)

awk -F : '{print $1}' /etc/passwd
awk '{print(toupper($1))}' textfile

cut
---
pick a particular piece from a text string

cut -d : -f 1 /etc/passwd
-d delimiter
-f field to extract


cut by byte positions (-b option)
by character (-c)
cut -b 1-10 /etc/passwd

sort
----

sort -r
sort -h (human numeric sort)
(-d only in linux, not on macos) du -hd1 | sort -h



ed101 editor (1973/1974)
-----------
works with whole lines at a time
lowercase h (for little bit help)
ed has two modes, command mode and insert mode.

Commands are single letters
a (append text after the current line)
i (insert text after the current line)
c (replace the current line)

. (a single period in its own line means that we are done inserting text)

p (printout the current line)
n (prepending a line number, printout the current line)

typing any number as a command will move to that line and print out that line

1 (move to line 1 and printout that line)

-number or +number to move up and down by a certain number of lines

use ranges of lines with the comma command

1,2p (print lines 1-2)
1,3n (prepend line numbers and print lines 1-3)

, by itself represents the range of lines from 1st line to the end of the file
$ represents the end of the file

,n print the whole file with line numbers

eg 2,$p
!,3n


If something within a line needs to be changed, we need to replace the whole line

m command (moves a line)
1m3 (move the 1st line after the 3rd line)

t command (copies a line)
1t2 (copies text from 1st line to below the 2nd one)

j command (join lines)


ed can also handle a whole host of pattern matching commands
/searchstring will printout the 1st match and set the current line to the line where the match was found

s command for substitution
s/searchstring/substitutestring (Will also print the substituted resulting line)
can use regexex


save to disk is with the w command

w name_of_file.txt
the number echoed represents how many characters were written

q (quitting ed)

ed name_of_file shall echo how many characters are there on the file
